{"version":3,"sources":["components/Analytic/Analytic.js","libraries/chartHelper.js"],"names":["chartOptions","scales","yAxes","ticks","beginAtZero","display","maintainAspectRatio","Analytic","sessionName","reporter","log","useState","historyData","setHistoryData","useEffect","fetch","process","then","response","json","data","map","item","sd","getStandardDeviation","points","length","className","array","xOptions","yOptions","sdComparation","last20Votes","getMean","slice","last50Votes","last100Votes","chartDate","reverse","key","transformer","value","substr","labels","datasets","label","fill","backgroundColor","borderColor","tableRows","Date","time","toLocaleString","join","options","height","scope","React","memo"],"mappings":"+LAQMA,EAAe,CACjBC,OAAQ,CACJC,MAAO,CAAC,CAAEC,MAAO,CAAEC,aAAa,EAAMC,SAAS,MAEnDC,qBAAqB,GAGzB,SAASC,EAAT,GAAoC,IAAhBC,EAAe,EAAfA,YAChBC,IAASC,IAAI,qBADkB,MAIOC,mBAAS,IAJhB,mBAIxBC,EAJwB,KAIXC,EAJW,KAmB/B,GAZAC,qBAAU,WACNC,MAAMC,qFAAsCR,GACvCS,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACH,IAAMC,EAAOD,EAAKE,KAAI,SAACC,GAEnB,OADAA,EAAKC,GAAKC,YAAqBF,EAAKG,QAC7BH,KAEXT,EAAeO,QAExB,CAACZ,IAEuB,IAAvBI,EAAYc,OACZ,OACI,qBAAKC,UAAU,cAAf,gGAMR,IC1C4BC,EAAOC,EAAUC,ED0CvCC,EAAgB,CAClBC,YAAaC,YAAQrB,EAAYsB,MAAM,EAAG,IAAK,MAC/CC,YAAaF,YAAQrB,EAAYsB,MAAM,EAAG,IAAK,MAC/CE,aAAcH,YAAQrB,EAAYsB,MAAM,EAAG,KAAM,OAE/CG,GC/CsBT,EDgDxBhB,EAAYsB,MAAM,EAAG,IAAII,UChDMT,EDiD/B,CAAEU,IAAK,OAAQC,YAAa,SAACC,GAAD,OAAWA,EAAMC,OAAO,EAAG,KCjDdZ,EDkDzC,CAAES,IAAK,MCjDI,CACXI,OAAQf,EAAMP,KAAI,SAACC,GACf,MAAuC,oBAAzBO,EAASW,YACjBX,EAASW,YAAYlB,EAAKO,EAASU,MACnCjB,EAAKO,EAASU,QAExBK,SAAU,CACN,CACIC,MAAO,qBACPzB,KAAMQ,EAAMP,KAAI,SAACC,GACb,MAAuC,oBAAzBQ,EAASU,YACjBV,EAASU,YAAYlB,EAAKQ,EAASS,MACnCjB,EAAKQ,EAASS,QAExBO,MAAM,EACNC,gBAAiB,0BACjBC,YAAa,8BDoCnBC,EAAYrC,EAAYS,KAAI,SAACC,GAC/B,OACI,+BACI,6BAAK,IAAI4B,KAAK5B,EAAK6B,MAAMC,mBACzB,6BAAK9B,EAAKG,OAAO4B,KAAK,SACtB,6BAAK/B,EAAKC,OAHLD,EAAK6B,SAQtB,OACI,gCACI,sBAAKxB,UAAU,mBAAf,UACI,uHACA,gDAEI,sBACIA,UAAS,mBACLI,EAAcC,YAAcD,EAAcI,YAAc,SAAW,UAD9D,sBADb,SAKKJ,EAAcC,cAPvB,gBAUI,sBAAML,UAAU,uCAAhB,SAAwDI,EAAcI,cAV1E,iBAYI,sBAAMR,UAAU,uCAAhB,SAAwDI,EAAcK,qBAG9E,qBAAKT,UAAU,OAAf,SACI,cAAC,OAAD,CAAMP,KAAMiB,EAAWiB,QAAStD,EAAcuD,OAAQ,QAE1D,wBAAO5B,UAAU,6CAAjB,UACI,gCACI,qBAAIA,UAAU,aAAd,UACI,oBAAI6B,MAAM,MAAV,yBACA,qBAAIA,MAAM,MAAV,oBAAwBhD,KACxB,oBAAIgD,MAAM,MAAV,qCAGR,gCAAQP,UAUTQ,cAAMC,KAAKnD","file":"static/js/4.c600dc15.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\n\nimport { getStandardDeviation, getMean } from 'libraries/mathHelper';\nimport reporter from 'libraries/reporter';\nimport { createChartData } from 'libraries/chartHelper';\n\nconst chartOptions = {\n    scales: {\n        yAxes: [{ ticks: { beginAtZero: true, display: false } }],\n    },\n    maintainAspectRatio: false,\n};\n\nfunction Analytic({ sessionName }) {\n    reporter.log('Analytic render()');\n\n    // state\n    const [historyData, setHistoryData] = useState([]);\n\n    // fetch data\n    useEffect(() => {\n        fetch(process.env.REACT_APP_ANALYTICS_URL + sessionName)\n            .then((response) => response.json())\n            .then((json) => {\n                const data = json.map((item) => {\n                    item.sd = getStandardDeviation(item.points);\n                    return item;\n                });\n                setHistoryData(data);\n            });\n    }, [sessionName]);\n\n    if (historyData.length === 0) {\n        return (\n            <div className=\"text-center\">\n                No data. This is powered by a Lambda function which has a delay due to cold start.\n            </div>\n        );\n    }\n\n    const sdComparation = {\n        last20Votes: getMean(historyData.slice(0, 20), 'sd'),\n        last50Votes: getMean(historyData.slice(0, 50), 'sd'),\n        last100Votes: getMean(historyData.slice(0, 100), 'sd'),\n    };\n    const chartDate = createChartData(\n        historyData.slice(0, 20).reverse(),\n        { key: 'time', transformer: (value) => value.substr(5, 5) },\n        { key: 'sd' }\n    );\n\n    const tableRows = historyData.map((item) => {\n        return (\n            <tr key={item.time}>\n                <td>{new Date(item.time).toLocaleString()}</td>\n                <td>{item.points.join(' , ')}</td>\n                <td>{item.sd}</td>\n            </tr>\n        );\n    });\n\n    return (\n        <div>\n            <div className=\"text-center mb-3\">\n                <div>Average Standard Deviation: reflects the team's disagreement - the lower, the better</div>\n                <div>\n                    Last 20 Votes\n                    <span\n                        className={`badge bg-${\n                            sdComparation.last20Votes > sdComparation.last50Votes ? 'danger' : 'success'\n                        } rounded-pill mx-2`}\n                    >\n                        {sdComparation.last20Votes}\n                    </span>\n                    Last 50 Votes\n                    <span className=\"badge bg-secondary rounded-pill mx-2\">{sdComparation.last50Votes}</span>\n                    Last 100 Votes\n                    <span className=\"badge bg-secondary rounded-pill mx-2\">{sdComparation.last100Votes}</span>\n                </div>\n            </div>\n            <div className=\"mb-3\">\n                <Line data={chartDate} options={chartOptions} height={150} />\n            </div>\n            <table className=\"table table-dark table-striped text-center\">\n                <thead>\n                    <tr className=\"text-light\">\n                        <th scope=\"col\">Date &amp; Time</th>\n                        <th scope=\"col\">Votes @{sessionName}</th>\n                        <th scope=\"col\">Standard Deviation</th>\n                    </tr>\n                </thead>\n                <tbody>{tableRows}</tbody>\n            </table>\n        </div>\n    );\n}\n\nAnalytic.propTypes = {\n    sessionName: PropTypes.string,\n};\n\nexport default React.memo(Analytic);\n","export function createChartData(array, xOptions, yOptions) {\n    const output = {\n        labels: array.map((item) => {\n            return typeof xOptions.transformer === 'function'\n                ? xOptions.transformer(item[xOptions.key])\n                : item[xOptions.key];\n        }),\n        datasets: [\n            {\n                label: 'Standard Deviation',\n                data: array.map((item) => {\n                    return typeof yOptions.transformer === 'function'\n                        ? yOptions.transformer(item[yOptions.key])\n                        : item[yOptions.key];\n                }),\n                fill: false,\n                backgroundColor: 'rgba(255, 99, 132, 0.8)',\n                borderColor: 'rgba(255, 99, 132, 0.2)',\n            },\n        ],\n    };\n\n    return output;\n}\n"],"sourceRoot":""}